@page "/"
@inject IConfiguration config

<PageTitle>Index</PageTitle>

<h1>Upload file</h1>

<InputFile OnChange="@LoadFiles" class="form-control" multiple accept=".png,.jpg,.txt"/>

@if (errors.Count > 0)
{
    <h2>Errors</h2>
    <ul class="text-danger">
        @foreach (var error in errors)
        {
            <li>@error</li>
        }
    </ul>
}

@code {
    private readonly long maxFileSize = 3 * 1024 * 1024; //represents 3MB
    private readonly int maxAllowedFiles = 3;
    private readonly List<string> errors = new List<string>();
    private const string _subPath = "bagan";

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        errors.Clear();

        if (e.FileCount > maxAllowedFiles)
        {
            errors.Add($"Error: Attempting to upload {e.FileCount} files, but only {maxAllowedFiles} files are allowed");
            return;
        }

        var fileStoragePath = config.GetValue<string>("FileStorage");

        if (string.IsNullOrWhiteSpace(fileStoragePath))
        {
            throw new ArgumentNullException(nameof(fileStoragePath));
        }

        var fileStoragePathWithSubPath = Path.Combine(
            fileStoragePath,
            _subPath);

        Directory.CreateDirectory(fileStoragePathWithSubPath);

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                var newFileName = Path.ChangeExtension(
                Path.GetRandomFileName(), 
                Path.GetExtension(file.Name));

                var path = Path.Combine(
                    fileStoragePathWithSubPath,
                    newFileName);

                await using (var fileStream = new FileStream(path, FileMode.Create))
                {
                    await file.OpenReadStream(maxFileSize).CopyToAsync(fileStream);
                }
            }
            catch (Exception ex)
            {
                errors.Add($"File: {file.Name} Error: {ex.Message}");
            }
        }
    }
}