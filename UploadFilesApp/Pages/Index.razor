@page "/"
@using UploadFiles.DAL.DataAccess;
@using UploadFiles.Model.Data;
@inject IConfiguration config
@inject ISqlDataAccess dataAccess

<PageTitle>Index</PageTitle>

<h1>Upload file</h1>

<EditForm Model="customer" OnValidSubmit="SubmitFormAsync">
    <div>
        <label for="firstName">First Name:</label> 
        <InputText id="firstName" class="form-control" @bind-Value="customer.FirstName" />
    </div>
    <div>
        <label for="lastName">Last Name:</label>
        <InputText id="lastName" class="form-control" @bind-Value="customer.LastName" />
    </div>
    <div>
        <label for="profilePicture">Profile Picture:</label>
        <InputFile OnChange="LoadFiles" id="profilePicture" class="form-control" accept=".png,.jpg,.txt" />
    </div>
    <button class="btn btn-primary mt-3" type="submit">Create Customer</button>
</EditForm>

@if (errors.Count > 0)
{
    <h2>Errors</h2>
    <ul class="text-danger">
        @foreach (var error in errors)
        {
            <li>@error</li>
        }
    </ul>
}

@if (_customers is not null)
{
    <h2>Existing Customers</h2>
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Profile Picture</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in _customers)
            {
                <tr>
                    <td>@customer.FirstName</td>
                    <td>@customer.LastName</td>
                    <td>
                        @if (!string.IsNullOrWhiteSpace(customer.FileName))
                        {
                            <img src="@CreateImageWebPath(customer.FileName)" width="400" />
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private readonly long maxFileSize = 3 * 1024 * 1024; //represents 3MB
    private readonly List<string> errors = new List<string>();
    private const string _subPath = "bagan";
    private CustomerModel customer = new CustomerModel();
    private List<CustomerModel>? _customers;
    private IBrowserFile? file;

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        file = e.File;
    }

    private async Task SubmitFormAsync()
    {
        errors.Clear();

        try
        {
            var relativePath = await CaptureFileAsync();
            customer.FileName = relativePath;

            await dataAccess.SaveDataAsync(DataAccessConsts.CustomerInsertProcedureName, customer);

            ResetCustomerForm();

            await LoadCustomers();
        }
        catch (Exception ex)
        {
            errors.Add($"Error: {ex.Message}");
        }
    }

    private void ResetCustomerForm()
    {
        customer = new CustomerModel();
        file = null;
        errors.Clear();
    }

    private async Task<string> CaptureFileAsync()
    {
        if (file == null)
        {
            return await Task.FromResult(string.Empty);
        }

        var fileStoragePath = config.GetValue<string>("FileStorage");

        if (string.IsNullOrWhiteSpace(fileStoragePath))
        {
            throw new ArgumentNullException(nameof(fileStoragePath));
        }

        var fileStoragePathWithSubPath = Path.Combine(
            fileStoragePath,
            _subPath);

        Directory.CreateDirectory(fileStoragePathWithSubPath);
        try
        {
            var newFileName = Path.ChangeExtension(
                Path.GetRandomFileName(),
                Path.GetExtension(file.Name));

            var path = Path.Combine(
                fileStoragePathWithSubPath,
                newFileName);

            await using (var fileStream = new FileStream(path, FileMode.Create))
            {
                await file.OpenReadStream(maxFileSize).CopyToAsync(fileStream);
            }

            var relativePath = Path.Combine(_subPath, newFileName);
            return await Task.FromResult(relativePath);
        }
        catch (Exception ex)
        {
            errors.Add($"File: {file.Name} Error: {ex.Message}");
            throw;
        }
    }

    private async Task LoadCustomers()
    {
        _customers = await dataAccess.LoadDataAsync<CustomerModel>(DataAccessConsts.CustomerGetAllProcedureName);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomers();
        await base.OnInitializedAsync();
    }

    private string CreateImageWebPath(string relativePath)
    {
        return Path.Combine(config.GetValue<string>("WebStorageRoot")!, relativePath);
    }
}